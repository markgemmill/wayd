// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as slog$0 from "../../log/slog/models.js";

export function Debug(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Debug", message) as any;
    return $resultPromise;
}

export function Error(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Error", message) as any;
    return $resultPromise;
}

export function Fatal(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Fatal", message) as any;
    return $resultPromise;
}

export function Info(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Info", message) as any;
    return $resultPromise;
}

export function Logger(): Promise<slog$0.Logger | null> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Logger") as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Name(): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Name") as any;
    return $resultPromise;
}

export function Warn(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByName("wayd/services.LoggerService.Warn", message) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = slog$0.Logger.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
