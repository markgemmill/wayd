// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../time/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function ActiveEntryCount(): Promise<number> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3505691156) as any;
    return $resultPromise;
}

export function CategoryCount(): Promise<number> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1925486916) as any;
    return $resultPromise;
}

export function Close(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4022690647) as any;
    return $resultPromise;
}

export function Connect(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2467023949) as any;
    return $resultPromise;
}

export function CreateDefaults(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(800660363) as any;
    return $resultPromise;
}

export function EntryCount(): Promise<number> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1977789614) as any;
    return $resultPromise;
}

export function GetActiveEntry(): Promise<$models.Entry | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2660778371) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetAllActiveCategories(): Promise<$models.Category[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2269260644) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetAllActiveProjects(): Promise<$models.Project[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3229815450) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType5($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetEntryById(entryId: number): Promise<$models.Entry | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2237962329, entryId) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetProjectById(projectId: number): Promise<$models.Project> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3679173248, projectId) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType4($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Initialize(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(356715247) as any;
    return $resultPromise;
}

export function NewCategory(name: string): Promise<$models.Category | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3306543441, name) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType6($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function NewEntry(project: $models.Project | null): Promise<$models.Entry | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1246586099, project) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function NewProject(name: string, category: $models.Category | null): Promise<$models.Project | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2486108446, name, category) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType7($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ProjectCount(): Promise<number> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2974325593) as any;
    return $resultPromise;
}

export function ProjectDurationTimes(groupOn: string, startDate: time$0.Time, endDate: time$0.Time): Promise<$models.ProjectDuration[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1695658588, groupOn, startDate, endDate) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType9($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function SaveEntry(entry: $models.Entry | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2238242304, entry) as any;
    return $resultPromise;
}

export function StopEntry(entry: $models.Entry | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(990241831, entry) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.Entry.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $models.Category.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $models.Project.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $Create.Nullable($$createType2);
const $$createType7 = $Create.Nullable($$createType4);
const $$createType8 = $models.ProjectDuration.createFrom;
const $$createType9 = $Create.Array($$createType8);
