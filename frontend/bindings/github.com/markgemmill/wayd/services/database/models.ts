// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as gorm$0 from "../../../../../gorm.io/gorm/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../time/models.js";

export class Category {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "Name": string;
    "Active": boolean;

    /** Creates a new Category instance. */
    constructor($$source: Partial<Category> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Active" in $$source)) {
            this["Active"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Category instance from a string or object.
     */
    static createFrom($$source: any = {}): Category {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Category($$parsedSource as Partial<Category>);
    }
}

export class Entry {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "Start": time$0.Time;
    "End": time$0.Time;
    "Duration": number;
    "ProjectId": number;
    "Project": Project | null;
    "Note": string;

    /** Creates a new Entry instance. */
    constructor($$source: Partial<Entry> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("Start" in $$source)) {
            this["Start"] = null;
        }
        if (!("End" in $$source)) {
            this["End"] = null;
        }
        if (!("Duration" in $$source)) {
            this["Duration"] = 0;
        }
        if (!("ProjectId" in $$source)) {
            this["ProjectId"] = 0;
        }
        if (!("Project" in $$source)) {
            this["Project"] = null;
        }
        if (!("Note" in $$source)) {
            this["Note"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Entry instance from a string or object.
     */
    static createFrom($$source: any = {}): Entry {
        const $$createField8_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Project" in $$parsedSource) {
            $$parsedSource["Project"] = $$createField8_0($$parsedSource["Project"]);
        }
        return new Entry($$parsedSource as Partial<Entry>);
    }
}

export class Project {
    "ID": number;
    "CreatedAt": time$0.Time;
    "UpdatedAt": time$0.Time;
    "DeletedAt": gorm$0.DeletedAt;
    "Name": string;
    "Active": boolean;
    "CategoryId": number;
    "Category": Category | null;

    /** Creates a new Project instance. */
    constructor($$source: Partial<Project> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("CreatedAt" in $$source)) {
            this["CreatedAt"] = null;
        }
        if (!("UpdatedAt" in $$source)) {
            this["UpdatedAt"] = null;
        }
        if (!("DeletedAt" in $$source)) {
            this["DeletedAt"] = null;
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Active" in $$source)) {
            this["Active"] = false;
        }
        if (!("CategoryId" in $$source)) {
            this["CategoryId"] = 0;
        }
        if (!("Category" in $$source)) {
            this["Category"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Project instance from a string or object.
     */
    static createFrom($$source: any = {}): Project {
        const $$createField7_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Category" in $$parsedSource) {
            $$parsedSource["Category"] = $$createField7_0($$parsedSource["Category"]);
        }
        return new Project($$parsedSource as Partial<Project>);
    }
}

export class ProjectDuration {
    "Name": string;
    "EntryCount": number;
    "Seconds": number;
    "Duration": string;

    /** Creates a new ProjectDuration instance. */
    constructor($$source: Partial<ProjectDuration> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("EntryCount" in $$source)) {
            this["EntryCount"] = 0;
        }
        if (!("Seconds" in $$source)) {
            this["Seconds"] = 0;
        }
        if (!("Duration" in $$source)) {
            this["Duration"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProjectDuration instance from a string or object.
     */
    static createFrom($$source: any = {}): ProjectDuration {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProjectDuration($$parsedSource as Partial<ProjectDuration>);
    }
}

// Private type creation functions
const $$createType0 = Project.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = Category.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
